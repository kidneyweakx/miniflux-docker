version: "3"
services:
  caddy:
    image: caddy:latest
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ${DATA_FOLDER}/caddy_data:/data
      - ${DATA_FOLDER}/caddy_config:/config
      - ${DATA_FOLDER}/caddy_config/Caddyfile:/etc/caddy/Caddyfile
    networks:
      - public_access

  miniflux:
    image: miniflux/miniflux:latest
    container_name: miniflux
    restart: unless-stopped
    depends_on:
      - db
      - rsshub
    environment:
      - DATABASE_URL=postgres://miniflux:${DB_PASS}@db/miniflux?sslmode=disable
      - POLLING_FREQUENCY=15
      - RUN_MIGRATIONS=1
    networks:
      - public_access
      - database_only

  db:
    image: postgres:latest
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=miniflux
      - POSTGRES_PASSWORD=${DB_PASS}
    volumes:
      - miniflux-db:/var/lib/postgresql/data
    networks:
      - database_only

  rsshub:
    image: diygod/rsshub:latest
    container_name: rsshub
    restart: unless-stopped
    environment:
      NODE_ENV: production
      CACHE_TYPE: redis
      REDIS_URL: "redis://redis:6379/"
      PUPPETEER_WS_ENDPOINT: "ws://browserless:3000"
    networks:
      - public_access
      - service_only
    depends_on:
      - redis
      - browserless

  browserless:
    image: browserless/chrome:latest
    container_name: browserless
    restart: unless-stopped
    networks: 
      - service_only

  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    networks: 
      - service_only
    volumes:
      - redis-data:/data

  watchtower:
    container_name: watchtower
    image: containrrr/watchtower:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=86400
    restart: always

volumes:
  miniflux-db:
  redis-data:
  caddy_data:
    external: true
  caddy_config:

networks:
  public_access: # Provide the access for UI
  service_only: # Provide the communication network between services only
    internal: true
  database_only: # Provide the communication between and database only
    internal: true